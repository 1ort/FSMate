from __future__ import annotations

from abc import ABC, abstractmethod
from collections.abc import Collection
from typing import Any, Optional, Union, overload, Type, Callable, TypeVar

_F = TypeVar('_F', bound=Callable)

class ImpossibleTransitionError(Exception):
    pass

class StateStorage(ABC):
    @abstractmethod
    def get_state(self, instance: object) -> Any: ...
    @abstractmethod
    def set_state(self, instance: object, state: Any) -> None: ...

class AttributeStateStorage(StateStorage):
    def __init__(self, attr_name: str) -> None: ...
    def get_state(self, instance: object) -> Any: ...
    def set_state(self, instance: object, state: Any) -> None: ...

class ProxyStateStorage(StateStorage):
    def __init__(
        self, getter: Callable[[object], Any], setter: Callable[[object, Any], None]
    ) -> None: ...
    def get_state(self, instance: object) -> Any: ...
    def set_state(self, instance: object, state: Any) -> None: ...

class StateTransition:
    def __init__(
        self, source: Collection[Any], dest: Any, state_storage: StateStorage
    ) -> None: ...
    @overload
    def __get__(self, instance: None, owner: Type[object]) -> StateTransition: ...
    @overload
    def __get__(self, instance: object, owner: Type[object]) -> Callable[[], None]: ...
    def __repr__(self) -> str: ...
    def _register_callback(self, func: Callable) -> None: ...

class StateDispatcher:
    def __init__(
        self, state_storage: StateStorage, all_states: Collection[Any], fallback: Callable
    ) -> None: ...
    def register(self, func: Callable, *states: Any) -> None: ...
    def _get_dispatched_func(self, state: Any) -> Callable: ...
    def dispatch(self, instance: object, *args: Any, **kwargs: Any) -> Any: ...

class StateDispatchedMethod:
    def __init__(self, dispatcher: StateDispatcher) -> None: ...
    def __get__(self, instance: object, owner: Type[object]) -> Callable[..., Any]: ...
    def overload(self, *states: Any) -> Callable[[_F], StateDispatchedMethod]: ...

class StateDescriptor:
    def __init__(
        self,
        states: Collection[Any],
        initial_state: Optional[Any] = None,
        state_storage: Optional[StateStorage] = None,
    ) -> None: ...
    def __set_name__(self, owner: Type[object], attr_name: str) -> None: ...
    def __get__(self, instance: object, owner: Type[object]) -> Any: ...
    def __set__(self, instance: object, value: Any) -> None: ...
    def transition(self, source: Union[Any, Collection[Any]], dest: Any) -> StateTransition: ...
    def dispatch(self, method: Callable) -> StateDispatchedMethod: ...
    @overload
    def on_transition(self, first: StateTransition) -> Callable[[_F], _F]: ...
    @overload
    def on_transition(self, func: _F) -> _F: ...
    @overload
    def on_state_exited(self, first: Any) -> Callable[[_F], _F]: ...
    @overload
    def on_state_exited(self, func: _F) -> _F: ...
    @overload
    def on_state_entered(self, first: Any) -> Callable[[_F], _F]: ...
    @overload
    def on_state_entered(self, func: _F) -> _F: ...
